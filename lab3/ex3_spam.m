%
%% Курс Интеллектуальные системы (сентябрь 2019 - январь 2020)
%
% Лабораторная работа 3
% Задание 2 | Классификация спама посредством SVM-разделения
%
%  Указание
%  ------------
%  Файл содержит скрипт, реализующий пошаговое выполнение второй части 
%  задания по разделу «Статистические методы обучения. Метод опорных векторов». 
%  Вам следует в процессе выполнения полного задания самостоятельно написать или дополнить некоторые 
%  модули, в частности:
%
%     gaussianKernel.m (обязательное задание)
%     dataset3Params.m (обязательное задание)
%     processEmail.m   (факультативное задание)
%     emailFeatures.m  (факультативное задание)
%
%  В процессе выполнения обязательной части задания в принципе нет необходимости в изменении кода ex3_spam.m 
% (т.е. данного файла), или какого либо иного файла, кроме упомянутых.
%

%% Инициализация
clear ; close all; clc

%% ==================== Часть 1: Предварительная обработка ====================
%  Использование SVM-классификатора для решения задачи "Спам/не-спам" классификации предполагает
%  предварительную обработку данных, а именно преобразование классифицируемого электронного 
%  письма в вектор соответствующих признаков.
%  Необходимо завершить код processEmail.m, 
%  в результате чего будет сформирован список индексов слов для конкретного письма.

fprintf('\nПредобработка тестового письма(emailSample1.txt)\n');

% Выделение признаков
file_contents = readFile('emailSample1.txt');
word_indices  = processEmail(file_contents);

% Статистика данных
fprintf('Индексы слов: \n');
fprintf(' %d', word_indices);
fprintf('\n\n');

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% ==================== Часть 2: Выделение признаков ====================
%  Каждое электронное письмо преобразуется в вектор признаков в R^n. 
%  Необходимо завершить код emailFeatures.m для формирования вектора признаков для конкретного письма.

fprintf('\nВыделение признаков из тестового письма (emailSample1.txt)\n');

% Выделение признаков
file_contents = readFile('emailSample1.txt');
word_indices  = processEmail(file_contents);
features      = emailFeatures(word_indices);

% Статистика данных
fprintf('Длина вектора признаков: %d\n', length(features));
fprintf('Количество ненулевых ссылок: %d\n', sum(features > 0));

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% =========== Часть 3: Обучение линейного классификатора SVM для спам-класификации ========
%  В этой части необходимо произвести обучение линейного классификатора для определения
%  относится ли конкретное письмо к спаму или нет.

% Загрузка базы данных spamTrain 
% В пространстве переменных появляются X, y
load('spamTrain.mat');

fprintf('\nТренировка линейного SVM (классификация спама)\n')
fprintf('(это может потребовать 1 - 2 минут) ...\n')

C = 0.1;
model = svmTrain(X, y, C, @linearKernel);

p = svmPredict(model, X);

fprintf('Точность обучения: %f\n', mean(double(p == y)) * 100);

%% =================== Часть 4: Тестирование спам-классификатора ================
%  После обучения классификатора следует проверить его работу на тестовом наборе. 
%  Тестовый набор приводится в spamTest.mat

% Загрузка базы тестовых данных 
% В пространстве переменных появляются X, y
load('spamTest.mat');

fprintf('\nОценка линейного обученного SVM на тестовом наборе данных ...\n')

p = svmPredict(model, Xtest);

fprintf('Точность обучения: %f\n', mean(double(p == ytest)) * 100);
pause;


%% ================= Часть 5: Выделение спама ====================
%  Поскольку модель, которую мы обучаем, представляет собой линейный SVM, мы можем проанализировать весовые коэффициенты обученной модели
%  для лучшего понимания того, является ли электронное письмо спамом или нет. 
%  Следующий код отыскивает слова с наивысшими весами в классификаторе. 
%  Говоря неформально, классификатор "предполагает", что эти слова являются наиболее вероятными индикаторами спама.
%

% Сортировка весов
[weight, idx] = sort(model.w, 'descend');
vocabList = getVocabList();

fprintf('\nНаиболее вероятные слова-предсказатели спама: \n');
for i = 1:15
    fprintf(' %-15s (%f) \n', vocabList{idx(i)}, weight(i));
end

fprintf('\n\n');
fprintf('\nПауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% ======= Часть 6: Тестирование на наборе электронных писем =====================
%
% После того, как построен обученный спам-классификатор, появилась возможность 
% использовать его для обработки потока писем. 
% В перечень файлов по данному заданию входят - в качестве примеров - файлы spamSample1.txt,
% spamSample2.txt, emailSample1.txt и emailSample2.txt. 
% Программа ниже анализирует один из приведенных файлов, а затем использует натренированный спам SVM классификатор для
% сортировки писем "Спам /не спам".

% Задайте соответствующее имя файла(измените имя на spamSample2.txt,
% emailSample1.txt или emailSample2.txt для того, чтобы видеть различное предсказание для разных писем). 
% В качестве дополнительного задания может быть предложено создание
% собственного письма на английском языке специального содержания: "спам" или "не спам".
%
filenames = ["emailSample1.txt";"emailSample2.txt";"spamSample1.txt";"spamSample2.txt"];
for i = 1:length(filenames)
    filename = filenames(i,:);

    % Чтение письма и предсказание
    file_contents = readFile(filename);
    word_indices  = processEmail(file_contents);
    x             = emailFeatures(word_indices);
    p = svmPredict(model, x);

    fprintf('\nОбрабатывается %s\n\nСпам- классификация: %d\n', filename, p);
    fprintf('(1 соответствует спаму, 0 - стандартное письмо)\n\n');
end

