%
%% Курс Интеллектуальные системы (сентябрь 2019 - январь 2020)
%
% Лабораторная работа 3
% Задание 1. Метод опорных векторов (SVM)
%
%  Указание
%  ------------
%  Файл содержит скрипт, реализующий пошаговое выполнение первой части 
%  задания по разделу «Статистические методы обучения. Метод опорных векторов». 
%  Вам следует в процессе выполнения полного задания самостоятельно написать или дополнить некоторые 
%  модули, в частности:
%
%     gaussianKernel.m (обязательное задание)
%     dataset3Params.m (обязательное задание)
%     processEmail.m   (факультативное задание)
%     emailFeatures.m  (факультативное задание)
%
%  В процессе выполнения обязательной части задания в принципе нет необходимости в изменении кода ex3.m 
% (т.е. данного файла), или какого либо иного файла, кроме упомянутых.
%

%% Инициализация
clear ; close all; clc

%% =============== Часть 1: Загрузка и визуализация данных ================

fprintf('Загрузка и визуализация данных ...\n')

% Загрузка из файла ex3data1: 
% В пространстве переменных появляются X, y 
load('ex3data1.mat');

figure;
% Отображение тренировочного набора данных
plotData(X, y);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% ==================== Часть 2: Обучение линейного классификатора SVM ====================
%  В следующей части кода линейный классификатор SVM тренируется на обучающем наборе 
%  и производится отображение разделяющей границы

% Загрузка данных из набора ex3data1: 
% В пространстве переменных появляются X, y 

load('ex3data1.mat');

fprintf('\nОбучения линейного SVM ...\n')

% Вам следует произвести моделирование задачи при различных значениях C и пояснить поведение 
% разделяющей гиперплоскости (прямой линии) (например, при C = 1000)
%
C = 1;
model = svmTrain(X, y, C, @linearKernel, 1e-3, 20);
visualizeBoundaryLinear(X, y, model);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% =============== Часть 3: Применение радиальной базисной функции (ядра) Гаусса ===============
%
%  Следует выполнить моделирование задачи с использованием радиальной базисной функции (ядра) Гаусса
%  Необходимо завершить код в gaussianKernel.m
%
fprintf('\nОценка ядра Гаусса ...\n')

x1 = [1 2 1]; x2 = [0 4 -1]; sigma = 2;
sim = gaussianKernel(x1, x2, sigma);

fprintf(['Значение ядра Гаусса между x1 = [1; 2; 1], x2 = [0; 4; -1], sigma = 0.5 :' ...
         '\n\t%f\n(должно быть ~ 0.324652)\n'], sim);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% =============== Часть 4: Визуализация обучающего набора 2 ================
%

fprintf('Загрузка и визуализация данных ...\n')

% Загрузка данных из набора ex3data2 
% В пространстве переменных появляются новые X, y 
load('ex3data2.mat');

figure;
% Визуализация набора обучающих данных
plotData(X, y);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% ========== Часть 5: Обучение SVM с радиальной базисной функцией Гаусса (Набор данных 2) ==========
%  После того как запрограммировано ядро, следует провести обучение классификатора SVM.
% 
fprintf('Обучение SVM с RBF ядром (может занимать от 1 до 2 минут) ...\n');

% Загрузка данных из набора ex3data2 
% В пространстве переменных появляются новые X, y 
load('ex3data2.mat');

% Параметры SVM
C = 1; sigma = 0.1;

model= svmTrain(X, y, C, @(x1, x2) gaussianKernel(x1, x2, sigma)); 
visualizeBoundary(X, y, model);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% =============== Часть 6: Визуализация обучающего набора 3 ================
%

fprintf('Загрузка и визуализация данных ...\n')

% Загрузка данных из набора ex3data3 
% В пространстве переменных появляются новые X, y 
load('ex3data3.mat');

%figure;
% Визуализация набора обучающих данных
%plotData(X, y);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

%% ========== Часть 7: Обучение SVM с радиальной базисной функцией Гаусса (Набор данных 3) ==========

%  Используется еще один набор данных, которые можно использовать для экспериментирования с SVM.
%  Изучите функционирование классификатора при различных значеиях C и sigma.
% 

% Загрузка данных из набора ex3data3 
% В пространстве переменных появляются новые X, y 
load('ex3data3.mat');

% Моделирование задачи SVM классификации с различными параметрами C и sigma.  
[C, sigma] = dataset3Params(X, y, Xval, yval);

% Обучение SVM-классификатора с оптимальными параметрами
model= svmTrain(X, y, C, @(x1, x2) gaussianKernel(x1, x2, sigma));
figure;
% Визуализация набора обучающих данных
plotData(X, y);
visualizeBoundary(X, y, model);

fprintf('Пауза в выполнении программы. Нажмите любую клавишу для продолжения.\n');
pause;

